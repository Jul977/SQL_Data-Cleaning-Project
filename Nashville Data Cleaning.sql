
-- DATA CLEANING IN SQL 

SELECT * FROM Nashville_Housing

-- CHANGING THE DATE FORMAT

SELECT SaleDateConverted, CONVERT(DATE,SaleDate) 
FROM Nashville_Housing


-- ADDING THE CONVERTED DATE TO THE TABLE

ALTER TABLE Nashville_Housing
ADD SaleDateConverted DATE

UPDATE Nashville_Housing
SET SaleDateConverted = CONVERT(DATE,SaleDate)


-- POPULATING PROPERTYADDRESS DATA

SELECT *
FROM Nashville_Housing
ORDER BY PARCELID 

SELECT A.PARCELID, A.PROPERTYADDRESS, B.PARCELID, B.PROPERTYADDRESS, ISNULL(A.PROPERTYADDRESS, B.PROPERTYADDRESS)
FROM Nashville_Housing A
JOIN Nashville_Housing B
	ON A.PARCELID = B.PARCELID
	AND A.UNIQUEID <> B.UNIQUEID
WHERE A.PROPERTYADDRESS IS NULL

UPDATE A
SET PROPERTYADDRESS = ISNULL(A.PROPERTYADDRESS, B.PROPERTYADDRESS)
FROM Nashville_Housing A
JOIN Nashville_Housing B
	ON A.PARCELID = B.PARCELID
	AND A.UNIQUEID <> B.UNIQUEID
WHERE A.PROPERTYADDRESS IS NULL


-- SPLITTING PROPERTYADDRESS INTO INDIVIDUAL COLUMNS (ADDRESS, CITY)  USING SUBSTRING

SELECT PROPERTYADDRESS
FROM Nashville_Housing
--WHERE PropertyAddreSS iS NULL
-- ORDER BY PARCELID 

SELECT 
SUBSTRING (PROPERTYADDRESS, 1, CHARINDEx(',', PROPERTYADDRESS) -1) AS ADDRESS,
SUBSTRING (PROPERTYADDRESS, CHARINDEx(',', PROPERTYADDRESS) +1, LEN(PROPERTYADDRESS)) AS ADDRESS
FROM Nashville_Housing

ALTER TABLE Nashville_Housing
ADD Property_Address NVARCHAR(255)

UPDATE Nashville_Housing
SET Property_Address = SUBSTRING (PROPERTYADDRESS, 1, CHARINDEx(',', PROPERTYADDRESS) -1)

ALTER TABLE Nashville_Housing
ADD Property_City NVARCHAR(255)

UPDATE Nashville_Housing
SET Property_City = SUBSTRING (PROPERTYADDRESS, CHARINDEx(',', PROPERTYADDRESS) +1, LEN(PROPERTYADDRESS))

SELECT * FROM Nashville_Housing



-- SPLITTING OWNERADDRESS INTO INDIVIDUAL COLUMNS (ADDRESS, CITY, STATE)  USING PARSENAME

SELECT OWNERADDRESS  
FROM Nashville_Housing

SELECT
PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 3),
PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 2),
PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 1)
FROM Nashville_Housing

ALTER TABLE Nashville_Housing
ADD OWNER_ADDRESS NVARCHAR(255)

UPDATE Nashville_Housing
SET OWNER_ADDRESS = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 3)

ALTER TABLE Nashville_Housing
ADD OWNER_City NVARCHAR(255)

UPDATE Nashville_Housing
SET OWNER_City = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 2)

ALTER TABLE Nashville_Housing
ADD OWNER_State NVARCHAR(255)

UPDATE Nashville_Housing
SET OWNER_State = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 1)

SELECT * FROM Nashville_Housing



-- CHANGING Y AND N TO YES AND NO IN 'SOLDASVACANT' FIELD USING CASE STATEMENT

SELECT DISTINCT(SOLDASVACANT), COUNT(SOLDASVACANT)
FROM Nashville_Housing
GROUP BY SOLDASVACANT
ORDER BY 2

SELECT SOLDASVACANT,
CASE 
WHEN SOLDASVACANT = 'Y' THEN 'YES'
WHEN SOLDASVACANT = 'N' THEN 'NO'
ELSE SOLDASVACANT
END
FROM Nashville_Housing

UPDATE Nashville_Housing
SET SOLDASVACANT = 
CASE 
WHEN SOLDASVACANT = 'Y' THEN 'YES'
WHEN SOLDASVACANT = 'N' THEN 'NO'
ELSE SOLDASVACANT
END




--REMOVING DUPLICATE DATA

WITH ROW_NUMCTE AS(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY PARCELID,
				 PROPERTYADDRESS,
				 SALEPRICE,
				 SALEDATE,
				 LEGALREFERENCE
				 ORDER BY
					UNIQUEID
					) ROW_NUM

FROM Nashville_Housing)

DELETE 
FROM ROW_NUMCTE 
WHERE ROW_NUM >1



-- DELETING UNUSED COLUMNS

SELECT * FROM Nashville_Housing

ALTER TABLE Nashville_Housing
DROP COLUMN OWNERADDRESS, TaxDistrict, PROPERTYADDRESS, SaleDate


-- CREATING STORED PROCEDURES FOR EASY AUTOMATION OF QUERIES

CREATE PROCEDURE NV_LAND
AS
SELECT UNIQUEID, PROPERTY_ADDRESS, OWNERNAME, LANDVALUE, SALEPRICE
FROM Nashville_Housing

EXEC NV_LAND


-- CREATING TEMP TABLE USING SUBQUERIES

DROP TABLE IF EXISTS #TEMP_NA
CREATE TABLE #TEMP_NA (
UNIQUEID INT, 
PROPERTY_ADDRESS NVARCHAR(255),
OWNERNAME NVARCHAR(255), 
LANDVALUE INT, 
SALEPRICE INT
)
INSERT INTO #TEMP_NA
SELECT UNIQUEID, PROPERTY_ADDRESS, OWNERNAME, LANDVALUE, SALEPRICE
FROM Nashville_Housing
WHERE SALEPRICE > 1000000
ORDER BY SALEPRICE DESC

SELECT *
FROM #TEMP_NA


